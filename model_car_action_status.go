/*
BringAuto Fleet Management v2 API

Specification for BringAuto fleet backend HTTP API

API version: 4.0.0
Contact: fleet@bringauto.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CarActionStatus Car Action Status enum
type CarActionStatus string

// List of CarActionStatus
const (
	NORMAL CarActionStatus = "normal"
	PAUSED CarActionStatus = "paused"
)

// All allowed values of CarActionStatus enum
var AllowedCarActionStatusEnumValues = []CarActionStatus{
	"normal",
	"paused",
}

func (v *CarActionStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CarActionStatus(value)
	for _, existing := range AllowedCarActionStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CarActionStatus", value)
}

// NewCarActionStatusFromValue returns a pointer to a valid CarActionStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCarActionStatusFromValue(v string) (*CarActionStatus, error) {
	ev := CarActionStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CarActionStatus: valid values are %v", v, AllowedCarActionStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CarActionStatus) IsValid() bool {
	for _, existing := range AllowedCarActionStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CarActionStatus value
func (v CarActionStatus) Ptr() *CarActionStatus {
	return &v
}

type NullableCarActionStatus struct {
	value *CarActionStatus
	isSet bool
}

func (v NullableCarActionStatus) Get() *CarActionStatus {
	return v.value
}

func (v *NullableCarActionStatus) Set(val *CarActionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCarActionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCarActionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarActionStatus(val *CarActionStatus) *NullableCarActionStatus {
	return &NullableCarActionStatus{value: val, isSet: true}
}

func (v NullableCarActionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarActionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

